


const rom = [
	// Offset 0x00000000 to 0x000001DB
	0x12, 0x4E, 0xEA, 0xAC, 0xAA, 0xEA, 0xCE, 0xAA, 0xAA, 0xAE, 0xE0, 0xA0,
	0xA0, 0xE0, 0xC0, 0x40, 0x40, 0xE0, 0xE0, 0x20, 0xC0, 0xE0, 0xE0, 0x60,
	0x20, 0xE0, 0xA0, 0xE0, 0x20, 0x20, 0x60, 0x40, 0x20, 0x40, 0xE0, 0x80,
	0xE0, 0xE0, 0xE0, 0x20, 0x20, 0x20, 0xE0, 0xE0, 0xA0, 0xE0, 0xE0, 0xE0,
	0x20, 0xE0, 0x40, 0xA0, 0xE0, 0xA0, 0xE0, 0xC0, 0x80, 0xE0, 0xE0, 0x80,
	0xC0, 0x80, 0xA0, 0x40, 0xA0, 0xA0, 0xA2, 0x02, 0xDA, 0xB4, 0x00, 0xEE,
	0xA2, 0x02, 0xDA, 0xB4, 0x13, 0xDC, 0x68, 0x01, 0x69, 0x05, 0x6A, 0x0A,
	0x6B, 0x01, 0x65, 0x2A, 0x66, 0x2B, 0xA2, 0x16, 0xD8, 0xB4, 0xA2, 0x3E,
	0xD9, 0xB4, 0xA2, 0x02, 0x36, 0x2B, 0xA2, 0x06, 0xDA, 0xB4, 0x6B, 0x06,
	0xA2, 0x1A, 0xD8, 0xB4, 0xA2, 0x3E, 0xD9, 0xB4, 0xA2, 0x06, 0x45, 0x2A,
	0xA2, 0x02, 0xDA, 0xB4, 0x6B, 0x0B, 0xA2, 0x1E, 0xD8, 0xB4, 0xA2, 0x3E,
	0xD9, 0xB4, 0xA2, 0x06, 0x55, 0x60, 0xA2, 0x02, 0xDA, 0xB4, 0x6B, 0x10,
	0xA2, 0x26, 0xD8, 0xB4, 0xA2, 0x3E, 0xD9, 0xB4, 0xA2, 0x06, 0x76, 0xFF,
	0x46, 0x2A, 0xA2, 0x02, 0xDA, 0xB4, 0x6B, 0x15, 0xA2, 0x2E, 0xD8, 0xB4,
	0xA2, 0x3E, 0xD9, 0xB4, 0xA2, 0x06, 0x95, 0x60, 0xA2, 0x02, 0xDA, 0xB4,
	0x6B, 0x1A, 0xA2, 0x32, 0xD8, 0xB4, 0xA2, 0x3E, 0xD9, 0xB4, 0x22, 0x42,
	0x68, 0x17, 0x69, 0x1B, 0x6A, 0x20, 0x6B, 0x01, 0xA2, 0x0A, 0xD8, 0xB4,
	0xA2, 0x36, 0xD9, 0xB4, 0xA2, 0x02, 0xDA, 0xB4, 0x6B, 0x06, 0xA2, 0x2A,
	0xD8, 0xB4, 0xA2, 0x0A, 0xD9, 0xB4, 0xA2, 0x06, 0x87, 0x50, 0x47, 0x2A,
	0xA2, 0x02, 0xDA, 0xB4, 0x6B, 0x0B, 0xA2, 0x2A, 0xD8, 0xB4, 0xA2, 0x0E,
	0xD9, 0xB4, 0xA2, 0x06, 0x67, 0x2A, 0x87, 0xB1, 0x47, 0x2B, 0xA2, 0x02,
	0xDA, 0xB4, 0x6B, 0x10, 0xA2, 0x2A, 0xD8, 0xB4, 0xA2, 0x12, 0xD9, 0xB4,
	0xA2, 0x06, 0x66, 0x78, 0x67, 0x1F, 0x87, 0x62, 0x47, 0x18, 0xA2, 0x02,
	0xDA, 0xB4, 0x6B, 0x15, 0xA2, 0x2A, 0xD8, 0xB4, 0xA2, 0x16, 0xD9, 0xB4,
	0xA2, 0x06, 0x66, 0x78, 0x67, 0x1F, 0x87, 0x63, 0x47, 0x67, 0xA2, 0x02,
	0xDA, 0xB4, 0x6B, 0x1A, 0xA2, 0x2A, 0xD8, 0xB4, 0xA2, 0x1A, 0xD9, 0xB4,
	0xA2, 0x06, 0x66, 0x8C, 0x67, 0x8C, 0x87, 0x64, 0x47, 0x18, 0xA2, 0x02,
	0xDA, 0xB4, 0x68, 0x2C, 0x69, 0x30, 0x6A, 0x34, 0x6B, 0x01, 0xA2, 0x2A,
	0xD8, 0xB4, 0xA2, 0x1E, 0xD9, 0xB4, 0xA2, 0x06, 0x66, 0x8C, 0x67, 0x78,
	0x87, 0x65, 0x47, 0xEC, 0xA2, 0x02, 0xDA, 0xB4, 0x6B, 0x06, 0xA2, 0x2A,
	0xD8, 0xB4, 0xA2, 0x22, 0xD9, 0xB4, 0xA2, 0x06, 0x66, 0xE0, 0x86, 0x6E,
	0x46, 0xC0, 0xA2, 0x02, 0xDA, 0xB4, 0x6B, 0x0B, 0xA2, 0x2A, 0xD8, 0xB4,
	0xA2, 0x36, 0xD9, 0xB4, 0xA2, 0x06, 0x66, 0x0F, 0x86, 0x66, 0x46, 0x07,
	0xA2, 0x02, 0xDA, 0xB4, 0x6B, 0x10, 0xA2, 0x3A, 0xD8, 0xB4, 0xA2, 0x1E,
	0xD9, 0xB4, 0xA3, 0xE8, 0x60, 0x00, 0x61, 0x30, 0xF1, 0x55, 0xA3, 0xE9,
	0xF0, 0x65, 0xA2, 0x06, 0x40, 0x30, 0xA2, 0x02, 0xDA, 0xB4, 0x6B, 0x15,
	0xA2, 0x3A, 0xD8, 0xB4, 0xA2, 0x16, 0xD9, 0xB4, 0xA3, 0xE8, 0x66, 0x89,
	0xF6, 0x33, 0xF2, 0x65, 0xA2, 0x02, 0x30, 0x01, 0xA2, 0x06, 0x31, 0x03,
	0xA2, 0x06, 0x32, 0x07, 0xA2, 0x06, 0xDA, 0xB4, 0x6B, 0x1A, 0xA2, 0x0E,
	0xD8, 0xB4, 0xA2, 0x3E, 0xD9, 0xB4, 0x12, 0x48
];


quirks = {}
quirks['shift'] = 1

state = "OFF"
function setMem(){
    ram = []
    for(let i = 0; i < 4096; i++){
        ram.push(0)
    }

    regs = []
    for(let i = 0; i < 16; i++){
        regs.push(0)
    }

    PC = 0x200
    DT = 0
    ST = 0
    I = 0
	stack = []
}

function insertRom(){
    for(let i = 0; i < rom.length; i++){
        ram[i + 0x200] = rom[i]
    }
}

function resetDisplay(){
    OFF = "Yellow Concrete"
    ON = "Orange Concrete"
    
    dis = []
    for(let i = 0; i < 32; i++){
        dis.push([])
        for(let x = 0; x < 64; x++){
            dis[i].push(0)
        }
    }
    
    for(let i = 0; i < 8; i++){
        api.setBlockRect([i*8, 0, 0], [i*8 + 8, 32, 0], OFF)
    }
    
}

function DXYN(x,y,n){
    x = regs[x] & 63
    y = regs[y] & 31
    console.log(`${x} and ${y}`)
    regs[0xF] = 0
    for(let h = 0; h < n; h++){
        let data = ram[I + h].toString(2)
        while(data.length < 8){data = "0" + data}
        console.log(data)
        for(let m = 0; m < 8; m++){
            if(dis[y][x + m] == 1){
                regs[0xF] = 1
            }
            dis[y][x+m] ^= +data[m]
			if(x+m < 64 && x > 0 && y < 32){
            	if(dis[y][x+m] == 1){
					api.setBlock(x+m,32-y,0,ON)
				} else {
					api.setBlock(x+m,32-y,0,OFF)
				}
			}
        }
        y++
    }
}
function swcF(X,Y,N,NN,NNN){
	switch(NN){
		case 0x07:
			regs[X] = DT
			break
		case 0x15:
			DT = regs[X]
			break
		case 0x18:
			ST = regs[X]
			break
		case 0x1E:
			I += regs[X]
			if(I > 0xFFF){
				regs[15] = 1
			}
			break
		case 0x33:
			ram[I] = Math.floor(regs[X] / 100)
			ram[I+1] = Math.floor(regs[X] / 10) % 10
			ram[I+2] = regs[X] % 10
			break
		case 0x55:
			for(let m = 0; m < X + 1; m++){
				ram[I + m] = regs[m]
			}
			break
		case 0x65:
			for(let m = 0; m < X + 1; m++){
				regs[m] = ram[I + m] 
			}
			break
	}
}
function swc8(X,Y,N,NN,NNN){
	switch(N){
		case 0x0:
			regs[X] = regs[Y]
			break
		case 0x1:
			regs[X] |= regs[Y]
			break
		case 0x2:
			regs[X] &= regs[Y]
			break
		case 0x3:
			regs[X] ^= regs[Y]
			break
		case 0x4:
			regs[X] = regs[X] + regs[Y]
			if(regs[X] > 0xFF){
				regs[X] &= 0xFF
				regs[15] = 1
			} else {
				regs[15] = 0
			}
			break
		case 0x5:
			regs[X] -= regs[Y]
			if(regs[X] < 0){
				regs[X] += 0x100
				regs[15] = 0
			} else {
				regs[15] = 1
			}
			break
		case 0x7:
			regs[X] = regs[Y] - regs[X]
			if(regs[X] < 0){
				regs[X] += 0x100
				regs[15] = 0
			} else {
				regs[15] = 1
			}
			break
		case 0x6:
			if(quirks['shift']){
				regs[X] = regs[Y]
			}
			tmp = regs[X] & 1
			regs[X] >>= 1
			regs[15] = tmp
			break
		case 0xE:
			if(quirks['shift']){
				regs[X] = regs[Y]
			}
			tmp = regs[X] & 0x80
			regs[X] <<= 1
			regs[X] &= 0xFF
			regs[0xF] = tmp
			break
	}
}

function interpret(n){
    console.log(n.toString(16))
    let opCode = n
    let prefix = (opCode & 0xF000) >> 12
    let X = (opCode & 0x0F00) >> 8
    let Y = (opCode & 0x00F0) >> 4
    let N = (opCode & 0x000F)
    let NN = (opCode & 0x00FF)
    let NNN = (opCode & 0x0FFF)
    console.log(`${PC}, ${prefix}, ${X}, ${Y}, ${N}, ${NN}, ${NNN}`)

    switch( prefix ){
        case 0x0:
			switch(NNN){
				case 0x0E0:
            		for(let i = 0; i < 32; i++){
                		for(let j = 0; j < 64; j++){
                    		dis[i][j] = 0
                		}
            		}
					break
				case 0x0EE:
					PC = stack.shift()
					break
			}
            break
        case 0x1:
			if(NNN == PC - 2){
				state = "HALT"
			}
            PC = NNN
            break
		case 0x2:
			stack.push(PC)
			PC = NNN
		case 0x3:
			if(regs[X] == NN){
				PC += 2
			}
			break
		case 0x4:
			if(regs[X] != NN){
				PC += 2
			}
			break
		case 0x5:
			if(regs[X] == regs[Y]){
				PC += 2
			}
			break
        case 0x6:
            regs[X] = NN
            break
        case 0x7:
            regs[X] = (regs[X] + NN) & 0xFF
            break
		case 0x8:
			swc8(X,Y,N,NN,NNN)
			break
		case 0x9:
			if(regs[X] != regs[Y]){
				PC += 2
			}
			break
        case 0xA:
            I = NNN
            break
		case 0xC:
			regs[X] =  Math.floor(Math.random() * 0xFF) & NN
        case 0xD:
            DXYN(X,Y,N)
            break
		case 0xF:
			swcF(X,Y,N,NN,NNN)
			break
            
    }
    
}


function tick1(){
    switch (state){
        case "OFF":
            setMem()
            state = "ON"
            break
        case "ON":
            insertRom()
            state = "DRAWING"
            break
        case "DRAWING":
            resetDisplay()
            state = "RUNNING"
            break
        case "RUNNING":
            if(DT > 0){
                DT--
            }
            if(ST > 0){
                ST--
            }
            let j = 0x100 * ram[PC] + ram[PC + 1]
            PC += 2
            interpret(j)
            break
    }
}

function tick(){
	for(let i = 0; i < 10; i++){
		tick1()
	}
}


