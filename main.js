


const rom = [
	0x12, 0xA0, 0x60, 0x00, 0xE0, 0xA1, 0x12, 0x04, 0x70, 0x01, 0x40, 0x10,
	0x00, 0xEE, 0x12, 0x04, 0xFC, 0x65, 0x22, 0x76, 0x41, 0x00, 0x00, 0xEE,
	0x80, 0x10, 0x22, 0x76, 0x42, 0x00, 0x00, 0xEE, 0x80, 0x20, 0x22, 0x76,
	0x43, 0x00, 0x00, 0xEE, 0x80, 0x30, 0x22, 0x76, 0x44, 0x00, 0x00, 0xEE,
	0x80, 0x40, 0x22, 0x76, 0x45, 0x00, 0x00, 0xEE, 0x80, 0x50, 0x22, 0x76,
	0x46, 0x00, 0x00, 0xEE, 0x80, 0x60, 0x22, 0x76, 0x47, 0x00, 0x00, 0xEE,
	0x80, 0x70, 0x22, 0x76, 0x48, 0x00, 0x00, 0xEE, 0x80, 0x80, 0x22, 0x76,
	0x49, 0x00, 0x00, 0xEE, 0x80, 0x90, 0x22, 0x76, 0x4A, 0x00, 0x00, 0xEE,
	0x80, 0xA0, 0x22, 0x76, 0x4B, 0x00, 0x00, 0xEE, 0x80, 0xB0, 0x22, 0x76,
	0x4C, 0x00, 0x00, 0xEE, 0x80, 0xC0, 0x22, 0x76, 0x00, 0xEE, 0xA5, 0x57,
	0xF0, 0x1E, 0xDD, 0xE4, 0x7D, 0x04, 0x00, 0xEE, 0xA5, 0x5B, 0x8E, 0xD0,
	0x8E, 0xEE, 0x8E, 0xEE, 0xFE, 0x1E, 0xDA, 0xB4, 0x7A, 0x05, 0x00, 0xEE,
	0xA5, 0x58, 0x92, 0xC0, 0xA5, 0x55, 0x7B, 0x01, 0xDA, 0xB3, 0x7A, 0x04,
	0x7B, 0xFF, 0x00, 0xEE, 0x00, 0xE0, 0x6A, 0x32, 0x6B, 0x1B, 0xA6, 0x09,
	0xDA, 0xB4, 0x6A, 0x3A, 0xA6, 0x0D, 0xDA, 0xB4, 0x6D, 0x00, 0x6E, 0x00,
	0xA5, 0xF7, 0x22, 0x10, 0x6A, 0x16, 0x6B, 0x00, 0x61, 0x0F, 0x6D, 0x01,
	0x22, 0x80, 0x63, 0x0F, 0x6F, 0x14, 0x83, 0xF1, 0x6F, 0x00, 0x62, 0x32,
	0x82, 0x11, 0x8E, 0xF0, 0x6C, 0x3F, 0x22, 0x90, 0x82, 0xE0, 0x6C, 0x00,
	0x22, 0x90, 0x82, 0x30, 0x6C, 0x1F, 0x22, 0x90, 0x7A, 0x05, 0x6D, 0x02,
	0x22, 0x80, 0x63, 0x0F, 0x6F, 0x14, 0x83, 0xF2, 0x6F, 0x00, 0x62, 0x32,
	0x82, 0x12, 0x8E, 0xF0, 0x6C, 0x02, 0x22, 0x90, 0x82, 0xE0, 0x6C, 0x00,
	0x22, 0x90, 0x82, 0x30, 0x6C, 0x04, 0x22, 0x90, 0x7B, 0x05, 0x6A, 0x00,
	0x6D, 0x03, 0x22, 0x80, 0x63, 0x0F, 0x6F, 0x14, 0x83, 0xF3, 0x6F, 0x00,
	0x62, 0x32, 0x82, 0x13, 0x8E, 0xF0, 0x6C, 0x3D, 0x22, 0x90, 0x82, 0xE0,
	0x6C, 0x00, 0x22, 0x90, 0x82, 0x30, 0x6C, 0x1B, 0x22, 0x90, 0x7A, 0x05,
	0x6D, 0x04, 0x22, 0x80, 0x6F, 0x14, 0x8F, 0x14, 0x84, 0xF0, 0x63, 0x0F,
	0x6F, 0x14, 0x83, 0xF4, 0x6F, 0xAA, 0x62, 0x32, 0x82, 0x14, 0x8E, 0xF0,
	0x6C, 0x41, 0x22, 0x90, 0x82, 0xE0, 0x6C, 0x00, 0x22, 0x90, 0x82, 0x30,
	0x6C, 0x23, 0x22, 0x90, 0x82, 0x40, 0x6C, 0x00, 0x22, 0x90, 0x7A, 0x01,
	0x6D, 0x05, 0x22, 0x80, 0x6F, 0x14, 0x8F, 0x15, 0x84, 0xF0, 0x63, 0x14,
	0x6F, 0x0F, 0x83, 0xF5, 0x65, 0x0A, 0x6F, 0x0A, 0x85, 0xF5, 0x85, 0xF0,
	0x6F, 0xAA, 0x62, 0x32, 0x82, 0x15, 0x35, 0x01, 0x6F, 0x02, 0x8E, 0xF0,
	0x6C, 0x23, 0x22, 0x90, 0x82, 0xE0, 0x6C, 0x01, 0x22, 0x90, 0x82, 0x30,
	0x6C, 0x05, 0x22, 0x90, 0x82, 0x40, 0x6C, 0x01, 0x22, 0x90, 0x7B, 0x05,
	0x6A, 0x00, 0x6D, 0x06, 0x22, 0x80, 0x6F, 0x3C, 0x8F, 0xF6, 0x83, 0xF0,
	0x6F, 0xAA, 0x62, 0x3C, 0x82, 0x26, 0x8E, 0xF0, 0x6C, 0x1E, 0x22, 0x90,
	0x82, 0xE0, 0x6C, 0x00, 0x22, 0x90, 0x82, 0x30, 0x6C, 0x00, 0x22, 0x90,
	0x7A, 0x05, 0x6D, 0x07, 0x22, 0x80, 0x6F, 0x0A, 0x8F, 0x17, 0x84, 0xF0,
	0x63, 0x0F, 0x6F, 0x14, 0x83, 0xF7, 0x65, 0x0A, 0x6F, 0x0A, 0x85, 0xF7,
	0x85, 0xF0, 0x6F, 0xAA, 0x62, 0x0F, 0x61, 0x32, 0x82, 0x17, 0x35, 0x01,
	0x6F, 0x02, 0x8E, 0xF0, 0x6C, 0x23, 0x22, 0x90, 0x82, 0xE0, 0x6C, 0x01,
	0x22, 0x90, 0x82, 0x30, 0x6C, 0x05, 0x22, 0x90, 0x82, 0x40, 0x6C, 0x01,
	0x22, 0x90, 0x7A, 0x01, 0x6D, 0x0E, 0x22, 0x80, 0x6F, 0x32, 0x8F, 0xFE,
	0x83, 0xF0, 0x6F, 0xAA, 0x62, 0x32, 0x82, 0x2E, 0x8E, 0xF0, 0x6C, 0x64,
	0x22, 0x90, 0x82, 0xE0, 0x6C, 0x00, 0x22, 0x90, 0x82, 0x30, 0x6C, 0x00,
	0x22, 0x90, 0x6D, 0x00, 0x6E, 0x10, 0xA5, 0xFD, 0x22, 0x10, 0x6A, 0x16,
	0x6B, 0x10, 0x61, 0x64, 0x6D, 0x04, 0x22, 0x80, 0x6F, 0xC8, 0x8F, 0x14,
	0x84, 0xF0, 0x63, 0x64, 0x6F, 0xC8, 0x83, 0xF4, 0x6F, 0xAA, 0x62, 0xC8,
	0x82, 0x14, 0x8E, 0xF0, 0x6C, 0x2C, 0x22, 0x90, 0x82, 0xE0, 0x6C, 0x01,
	0x22, 0x90, 0x82, 0x30, 0x6C, 0x2C, 0x22, 0x90, 0x82, 0x40, 0x6C, 0x01,
	0x22, 0x90, 0x7A, 0x01, 0x6D, 0x05, 0x22, 0x80, 0x6F, 0x5F, 0x8F, 0x15,
	0x84, 0xF0, 0x63, 0x5F, 0x6F, 0x64, 0x83, 0xF5, 0x6F, 0xAA, 0x62, 0x5F,
	0x82, 0x15, 0x8E, 0xF0, 0x6C, 0xFB, 0x22, 0x90, 0x82, 0xE0, 0x6C, 0x00,
	0x22, 0x90, 0x82, 0x30, 0x6C, 0xFB, 0x22, 0x90, 0x82, 0x40, 0x6C, 0x00,
	0x22, 0x90, 0x7B, 0x05, 0x6A, 0x00, 0x6D, 0x06, 0x22, 0x80, 0x6F, 0x3D,
	0x8F, 0xF6, 0x83, 0xF0, 0x6F, 0xAA, 0x62, 0x3D, 0x82, 0x26, 0x8E, 0xF0,
	0x6C, 0x1E, 0x22, 0x90, 0x82, 0xE0, 0x6C, 0x01, 0x22, 0x90, 0x82, 0x30,
	0x6C, 0x01, 0x22, 0x90, 0x7A, 0x05, 0x6D, 0x07, 0x22, 0x80, 0x6F, 0x69,
	0x8F, 0x17, 0x84, 0xF0, 0x63, 0x69, 0x6F, 0x64, 0x83, 0xF7, 0x6F, 0xAA,
	0x62, 0x69, 0x82, 0x17, 0x8E, 0xF0, 0x6C, 0xFB, 0x22, 0x90, 0x82, 0xE0,
	0x6C, 0x00, 0x22, 0x90, 0x82, 0x30, 0x6C, 0xFB, 0x22, 0x90, 0x82, 0x40,
	0x6C, 0x00, 0x22, 0x90, 0x7A, 0x01, 0x6D, 0x0E, 0x22, 0x80, 0x6F, 0xBC,
	0x8F, 0xFE, 0x83, 0xF0, 0x6F, 0xAA, 0x62, 0xBC, 0x82, 0x2E, 0x8E, 0xF0,
	0x6C, 0x78, 0x22, 0x90, 0x82, 0xE0, 0x6C, 0x01, 0x22, 0x90, 0x82, 0x30,
	0x6C, 0x01, 0x22, 0x90, 0x6D, 0x00, 0x6E, 0x1B, 0xA6, 0x03, 0x22, 0x10,
	0x6A, 0x16, 0x6B, 0x1B, 0x6D, 0x0F, 0x22, 0x80, 0x7A, 0xFF, 0x6D, 0x0E,
	0x22, 0x80, 0xA5, 0x44, 0x61, 0x10, 0xF1, 0x1E, 0x60, 0xAA, 0xF0, 0x55,
	0xA5, 0x54, 0xF0, 0x65, 0x82, 0x00, 0x6C, 0xAA, 0x22, 0x90, 0xA5, 0x44,
	0x6F, 0x10, 0xFF, 0x1E, 0x60, 0x55, 0xF0, 0x55, 0xA5, 0x54, 0xF0, 0x65,
	0x82, 0x00, 0x6C, 0x55, 0x22, 0x90, 0x15, 0x42, 0x00, 0x00, 0x00, 0x00,
	0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
	0x00, 0xA0, 0xC0, 0x80, 0xA0, 0x40, 0xA0, 0xE0, 0xA0, 0xA0, 0xE0, 0xC0,
	0x40, 0x40, 0xE0, 0xE0, 0x20, 0xC0, 0xE0, 0xE0, 0x60, 0x20, 0xE0, 0xA0,
	0xE0, 0x20, 0x20, 0xE0, 0xC0, 0x20, 0xC0, 0xE0, 0x80, 0xE0, 0xE0, 0xE0,
	0x20, 0x20, 0x20, 0xE0, 0xE0, 0xA0, 0xE0, 0xE0, 0xE0, 0x20, 0xE0, 0x40,
	0xA0, 0xE0, 0xA0, 0xC0, 0xE0, 0xA0, 0xE0, 0xE0, 0x80, 0x80, 0xE0, 0xC0,
	0xA0, 0xA0, 0xC0, 0xE0, 0xC0, 0x80, 0xE0, 0xE0, 0x80, 0xC0, 0x80, 0x60,
	0x80, 0xA0, 0x60, 0xA0, 0xE0, 0xA0, 0xA0, 0xE0, 0x40, 0x40, 0xE0, 0x60,
	0x20, 0x20, 0xC0, 0xA0, 0xC0, 0xA0, 0xA0, 0x80, 0x80, 0x80, 0xE0, 0xE0,
	0xE0, 0xA0, 0xA0, 0xC0, 0xA0, 0xA0, 0xA0, 0xE0, 0xA0, 0xA0, 0xE0, 0xC0,
	0xA0, 0xC0, 0x80, 0x40, 0xA0, 0xE0, 0x60, 0xC0, 0xA0, 0xC0, 0xA0, 0x60,
	0xC0, 0x20, 0xC0, 0xE0, 0x40, 0x40, 0x40, 0xA0, 0xA0, 0xA0, 0x60, 0xA0,
	0xA0, 0xA0, 0x40, 0x40, 0xA0, 0xA0, 0xA0, 0xA0, 0x40, 0x40, 0xE0, 0x60, 
	0x80, 0xE0, 0x00, 0x00, 0x00, 0x00, 0x00, 0xE0, 0x00, 0x00, 0x00, 0x00, 
	0x00, 0x40, 0x48, 0x2C, 0x68, 0x68, 0x8C, 0x00, 0x34, 0x2C, 0x70, 0x70, 
	0x8C, 0x00, 0x64, 0x78, 0x48, 0x3C, 0x70, 0x00, 0x0A, 0xAE, 0xA2, 0x42,
	0x38, 0x08, 0x30, 0xB8
];

quirks = {}
quirks['shift'] = 1

state = "OFF"
function setMem(){
    ram = []
    for(let i = 0; i < 4096; i++){
        ram.push(0)
    }

    regs = []
    for(let i = 0; i < 16; i++){
        regs.push(0)
    }

    PC = 0x200
    DT = 0
    ST = 0
    I = 0
	stack = []
}

function insertRom(){
    for(let i = 0; i < rom.length; i++){
        ram[i + 0x200] = rom[i]
    }
}

function resetDisplay(){
    OFF = "Yellow Concrete"
    ON = "Orange Concrete"
    
    dis = []
    for(let i = 0; i < 32; i++){
        dis.push([])
        for(let x = 0; x < 64; x++){
            dis[i].push(0)
        }
    }
    
    for(let i = 0; i < 8; i++){
        api.setBlockRect([i*8, 0, 0], [i*8 + 8, 32, 0], OFF)
    }
    
}

function DXYN(x,y,n){
    x = regs[x] & 63
    y = regs[y] & 31
    console.log(`${x} and ${y}`)
    regs[0xF] = 0
    for(let h = 0; h < n; h++){
        let data = ram[I + h].toString(2)
        while(data.length < 8){data = "0" + data}
        console.log(data)
        for(let m = 0; m < 8; m++){
            if(dis[y][x + m] == 1){
                regs[0xF] = 1
            }
            dis[y][x+m] ^= +data[m]
			if(x+m < 64 && x > 0 && y < 32){
            	if(dis[y][x+m] == 1){
					api.setBlock(x+m,32-y,0,ON)
				} else {
					api.setBlock(x+m,32-y,0,OFF)
				}
			}
        }
        y++
    }
}
function swcF(X,Y,N,NN,NNN){
	switch(NN){
		case 0x07:
			regs[X] = DT
			break
		case 0x15:
			DT = regs[X]
			break
		case 0x18:
			ST = regs[X]
			break
		case 0x1E:
			I += regs[X]
			if(I > 0xFFF){
				regs[15] = 1
			}
			break
		case 0x33:
			ram[I] = Math.floor(regs[X] / 100)
			ram[I+1] = Math.floor(regs[X] / 10) % 10
			ram[I+2] = regs[X] % 10
			break
		case 0x55:
			for(let m = 0; m < X + 1; m++){
				ram[I + m] = regs[m]
			}
			break
		case 0x65:
			for(let m = 0; m < X + 1; m++){
				regs[m] = ram[I + m] 
			}
			break
	}
}
function swc8(X,Y,N,NN,NNN){
	switch(N){
		case 0x0:
			regs[X] = regs[Y]
			break
		case 0x1:
			regs[X] |= regs[Y]
			break
		case 0x2:
			regs[X] &= regs[Y]
			break
		case 0x3:
			regs[X] ^= regs[Y]
			break
		case 0x4:
			regs[X] = regs[X] + regs[Y]
			if(regs[X] > 0xFF){
				regs[X] &= 0xFF
				regs[15] = 1
			} else {
				regs[15] = 0
			}
			break
		case 0x5:
			regs[X] -= regs[Y]
			if(regs[X] < 0){
				regs[X] += 0x100
				regs[15] = 0
			} else {
				regs[15] = 1
			}
			break
		case 0x7:
			regs[X] = regs[Y] - regs[X]
			if(regs[X] < 0){
				regs[X] += 0x100
				regs[15] = 0
			} else {
				regs[15] = 1
			}
			break
		case 0x6:
			if(quirks['shift']){
				regs[X] = regs[Y]
			}
			tmp = regs[X] & 1
			regs[X] >>= 1
			regs[15] = tmp
			break
		case 0xE:
			if(quirks['shift']){
				regs[X] = regs[Y]
			}
			tmp = regs[X] & 0x80
			regs[X] <<= 1
			regs[X] &= 0xFF
			regs[0xF] = tmp
			break
	}
}

function interpret(n){
    console.log(n.toString(16))
    let opCode = n
    let prefix = (opCode & 0xF000) >> 12
    let X = (opCode & 0x0F00) >> 8
    let Y = (opCode & 0x00F0) >> 4
    let N = (opCode & 0x000F)
    let NN = (opCode & 0x00FF)
    let NNN = (opCode & 0x0FFF)
    console.log(`${PC}, ${prefix}, ${X}, ${Y}, ${N}, ${NN}, ${NNN}`)

    switch( prefix ){
        case 0x0:
			switch(NNN){
				case 0x0E0:
            		for(let i = 0; i < 32; i++){
                		for(let j = 0; j < 64; j++){
                    		dis[i][j] = 0
                		}
            		}
					break
				case 0x0EE:
					PC = stack.shift()
					break
			}
            break
        case 0x1:
			if(NNN == PC - 2){
				state = "HALT"
			}
            PC = NNN
            break
		case 0x2:
			stack.push(PC)
			PC = NNN
		case 0x3:
			if(regs[X] == NN){
				PC += 2
			}
			break
		case 0x4:
			if(regs[X] != NN){
				PC += 2
			}
			break
		case 0x5:
			if(regs[X] == regs[Y]){
				PC += 2
			}
			break
        case 0x6:
            regs[X] = NN
            break
        case 0x7:
            regs[X] = (regs[X] + NN) & 0xFF
            break
		case 0x8:
			swc8(X,Y,N,NN,NNN)
			break
		case 0x9:
			if(regs[X] != regs[Y]){
				PC += 2
			}
			break
        case 0xA:
            I = NNN
            break
		case 0xC:
			regs[X] =  Math.floor(Math.random() * 0xFF) & NN
        case 0xD:
            DXYN(X,Y,N)
            break
		case 0xF:
			swcF(X,Y,N,NN,NNN)
			break
            
    }
    
}


function tick1(){
    switch (state){
        case "OFF":
            setMem()
            state = "ON"
            break
        case "ON":
            insertRom()
            state = "DRAWING"
            break
        case "DRAWING":
            resetDisplay()
            state = "RUNNING"
            break
        case "RUNNING":
            if(DT > 0){
                DT--
            }
            if(ST > 0){
                ST--
            }
            let j = 0x100 * ram[PC] + ram[PC + 1]
            PC += 2
            interpret(j)
            break
    }
}

function tick(){
	for(let i = 0; i < 10; i++){
		tick1()
	}
}


